#+TITLE: Driver Eye Monitoring – YOLOv8-Based Standalone System
#+AUTHOR: Eid Al-Khaldi

*Overview*
This project implements a standalone driver eye monitoring system using a custom-trained YOLOv8 model. The system detects "Open Eye" and "Closed Eye" classes in real-time from a camera feed.

If the driver's eyes remain closed for more than 5 seconds, an alert is triggered. If no driver intervention is detected after a grace period, the system escalates to an emergency stop signal.

⚠️ This system runs independently and is not connected to a vehicle control interface like OpenPilot in this repo. 

*Disclaimer*
I do not claim ownership of any production-grade emergency stop or driver monitoring system. This project is for demonstration, academic, and prototyping purposes only.

*Detection Classes*
- 0: Open Eye
- 1: Closed Eye

*Features*
- Real-time inference using YOLOv8 (Ultralytics)
- Drowsiness alert based on eye-closure duration
- Simulated emergency stop signal
- Optional logging and configuration support

*Directory Structure*

#+BEGIN_SRC
driver_eye_monitor/
├── driver_eye_monitor.py       # Main script
├── model/
│   └── yolov8n_eye.pt          # Trained YOLOv8 model
├── utils/
│   └── camera_utils.py         # (Optional) Helper for camera access
├── config/
│   └── settings.yaml           # (Optional) Tunable parameters
├── logs/
│   └── drowsiness_log.txt      # (Optional) Drowsiness event log
├── README.org                  # This file
└── LICENSE                     # MIT or other license
#+END_SRC

*Requirements*
- Python 3.9+
- PyTorch + CUDA (for GPU inference)
- ultralytics
- opencv-python
- cereal (for OpenPilot-style messaging)

Install dependencies:

#+BEGIN_SRC bash
pip install ultralytics opencv-python cereal pyyaml
#+END_SRC

*Usage*

From inside the root directory:

#+BEGIN_SRC bash
python driver_eye_monitor.py
#+END_SRC

You should see live detection running on your webcam or USB camera.

*Configuration*

Optional settings can be stored in =config/settings.yaml=:

#+BEGIN_SRC yaml
model_path: model/yolov8n_eye.pt
camera_index: 0
confidence: 0.5
eye_closed_id: 1
eye_open_id: 0
alarm_threshold_sec: 5
emergency_grace_sec: 3
#+END_SRC

If =settings.yaml= is present, =driver_eye_monitor.py= will read from it automatically.

*Future Work*
- Integration with OpenPilot forks (e.g. camera_monitoringd or visiond)
- Sending real CAN or planner-based emergency commands
- Expansion to detect additional states (phone use, yawning, etc.)
- Export model to TensorRT or ONNX for embedded deployment

*License*
MIT License (see LICENSE file)

*Author*
Eid AlKhaldi, PhD. 
